// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlatformEventChannelMemberMetadata platform event channel member metadata
//
// swagger:model PlatformEventChannelMemberMetadata
type PlatformEventChannelMemberMetadata struct {

	// This will not work until 'Change data capture event enrichment' is supported for Event Relay. See https://help.salesforce.com/s/articleView?id=sf.ev_relay_feature_support.htm&type=5. Until it is supported, using this will result in http 403 errors.
	EnrichedFields []*EnrichedField `json:"enrichedFields"`

	// event channel
	// Example: My_Channel__chn
	// Required: true
	EventChannel *string `json:"eventChannel"`

	// selected entity
	// Example: AccountChangeEvent
	// Required: true
	SelectedEntity *string `json:"selectedEntity"`
}

// Validate validates this platform event channel member metadata
func (m *PlatformEventChannelMemberMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnrichedFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlatformEventChannelMemberMetadata) validateEnrichedFields(formats strfmt.Registry) error {
	if swag.IsZero(m.EnrichedFields) { // not required
		return nil
	}

	for i := 0; i < len(m.EnrichedFields); i++ {
		if swag.IsZero(m.EnrichedFields[i]) { // not required
			continue
		}

		if m.EnrichedFields[i] != nil {
			if err := m.EnrichedFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enrichedFields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enrichedFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlatformEventChannelMemberMetadata) validateEventChannel(formats strfmt.Registry) error {

	if err := validate.Required("eventChannel", "body", m.EventChannel); err != nil {
		return err
	}

	return nil
}

func (m *PlatformEventChannelMemberMetadata) validateSelectedEntity(formats strfmt.Registry) error {

	if err := validate.Required("selectedEntity", "body", m.SelectedEntity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this platform event channel member metadata based on the context it is used
func (m *PlatformEventChannelMemberMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnrichedFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlatformEventChannelMemberMetadata) contextValidateEnrichedFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnrichedFields); i++ {

		if m.EnrichedFields[i] != nil {

			if swag.IsZero(m.EnrichedFields[i]) { // not required
				return nil
			}

			if err := m.EnrichedFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enrichedFields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enrichedFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlatformEventChannelMemberMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlatformEventChannelMemberMetadata) UnmarshalBinary(b []byte) error {
	var res PlatformEventChannelMemberMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
