// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlatformEventChannelMetadata platform event channel metadata
//
// swagger:model PlatformEventChannelMetadata
type PlatformEventChannelMetadata struct {

	// channel type
	// Example: 1234
	// Required: true
	// Enum: [data event]
	ChannelType *string `json:"channelType"`

	// label
	// Example: My Channel
	// Required: true
	Label *string `json:"label"`
}

// Validate validates this platform event channel metadata
func (m *PlatformEventChannelMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var platformEventChannelMetadataTypeChannelTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["data","event"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformEventChannelMetadataTypeChannelTypePropEnum = append(platformEventChannelMetadataTypeChannelTypePropEnum, v)
	}
}

const (

	// PlatformEventChannelMetadataChannelTypeData captures enum value "data"
	PlatformEventChannelMetadataChannelTypeData string = "data"

	// PlatformEventChannelMetadataChannelTypeEvent captures enum value "event"
	PlatformEventChannelMetadataChannelTypeEvent string = "event"
)

// prop value enum
func (m *PlatformEventChannelMetadata) validateChannelTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, platformEventChannelMetadataTypeChannelTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PlatformEventChannelMetadata) validateChannelType(formats strfmt.Registry) error {

	if err := validate.Required("channelType", "body", m.ChannelType); err != nil {
		return err
	}

	// value enum
	if err := m.validateChannelTypeEnum("channelType", "body", *m.ChannelType); err != nil {
		return err
	}

	return nil
}

func (m *PlatformEventChannelMetadata) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this platform event channel metadata based on context it is used
func (m *PlatformEventChannelMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlatformEventChannelMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlatformEventChannelMetadata) UnmarshalBinary(b []byte) error {
	var res PlatformEventChannelMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
