// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventRelayConfigMetadata event relay config metadata
//
// swagger:model EventRelayConfigMetadata
type EventRelayConfigMetadata struct {

	// Must be 'callout:' followed by the name of a NamedCredential
	// Example: callout:AWS_US_East_1
	// Required: true
	DestinationResourceName *string `json:"destinationResourceName"`

	// The name of the PlatformEventChannel to connect to
	// Example: My_Channel__chn
	// Required: true
	EventChannel *string `json:"eventChannel"`

	// relay option
	// Example: {\"ReplayRecovery\":\"LATEST\"}
	// Required: true
	// Enum: [{"ReplayRecovery":"EARLIEST"} {"ReplayRecovery":"LATEST"}]
	RelayOption *string `json:"relayOption"`
}

// Validate validates this event relay config metadata
func (m *EventRelayConfigMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelayOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventRelayConfigMetadata) validateDestinationResourceName(formats strfmt.Registry) error {

	if err := validate.Required("destinationResourceName", "body", m.DestinationResourceName); err != nil {
		return err
	}

	return nil
}

func (m *EventRelayConfigMetadata) validateEventChannel(formats strfmt.Registry) error {

	if err := validate.Required("eventChannel", "body", m.EventChannel); err != nil {
		return err
	}

	return nil
}

var eventRelayConfigMetadataTypeRelayOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["{\"ReplayRecovery\":\"EARLIEST\"}","{\"ReplayRecovery\":\"LATEST\"}"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventRelayConfigMetadataTypeRelayOptionPropEnum = append(eventRelayConfigMetadataTypeRelayOptionPropEnum, v)
	}
}

const (

	// EventRelayConfigMetadataRelayOptionReplayRecoveryEARLIEST captures enum value "{\"ReplayRecovery\":\"EARLIEST\"}"
	EventRelayConfigMetadataRelayOptionReplayRecoveryEARLIEST string = "{\"ReplayRecovery\":\"EARLIEST\"}"

	// EventRelayConfigMetadataRelayOptionReplayRecoveryLATEST captures enum value "{\"ReplayRecovery\":\"LATEST\"}"
	EventRelayConfigMetadataRelayOptionReplayRecoveryLATEST string = "{\"ReplayRecovery\":\"LATEST\"}"
)

// prop value enum
func (m *EventRelayConfigMetadata) validateRelayOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventRelayConfigMetadataTypeRelayOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventRelayConfigMetadata) validateRelayOption(formats strfmt.Registry) error {

	if err := validate.Required("relayOption", "body", m.RelayOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateRelayOptionEnum("relayOption", "body", *m.RelayOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event relay config metadata based on context it is used
func (m *EventRelayConfigMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EventRelayConfigMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventRelayConfigMetadata) UnmarshalBinary(b []byte) error {
	var res EventRelayConfigMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
