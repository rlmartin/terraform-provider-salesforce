// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryResult query result
// Example: isResource
//
// swagger:model QueryResult
type QueryResult struct {

	// done
	// Example: true
	// Required: true
	Done *bool `json:"done"`

	// q
	Q string `json:"q,omitempty"`

	// records
	// Required: true
	Records []map[string]string `json:"records"`

	// total size
	// Example: 1
	// Required: true
	TotalSize *int32 `json:"totalSize"`
}

// Validate validates this query result
func (m *QueryResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryResult) validateDone(formats strfmt.Registry) error {

	if err := validate.Required("done", "body", m.Done); err != nil {
		return err
	}

	return nil
}

func (m *QueryResult) validateRecords(formats strfmt.Registry) error {

	if err := validate.Required("records", "body", m.Records); err != nil {
		return err
	}

	return nil
}

func (m *QueryResult) validateTotalSize(formats strfmt.Registry) error {

	if err := validate.Required("totalSize", "body", m.TotalSize); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this query result based on context it is used
func (m *QueryResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QueryResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryResult) UnmarshalBinary(b []byte) error {
	var res QueryResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
