// Code generated by go-swagger; DO NOT EDIT.

package event_relay_feedback

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"log"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new event relay feedback API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for event relay feedback API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetEventRelayFeedback gets event relay feedback
*/
func (a *Client) GetEventRelayFeedback(params *GetEventRelayFeedbackParams) (*GetEventRelayFeedbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventRelayFeedbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventRelayFeedback",
		Method:             "GET",
		PathPattern:        "/sobjects/EventRelayFeedback/{Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventRelayFeedbackReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		log.Printf("[TRACE] err: %+v", err)
		return nil, err
	}
	return result.(*GetEventRelayFeedbackOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
