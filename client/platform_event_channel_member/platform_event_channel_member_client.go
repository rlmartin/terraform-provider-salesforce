// Code generated by go-swagger; DO NOT EDIT.

package platform_event_channel_member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"log"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new platform event channel member API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for platform event channel member API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreatePlatformEventChannelMember creates platform event channel member
*/
func (a *Client) CreatePlatformEventChannelMember(params *CreatePlatformEventChannelMemberParams) (*CreatePlatformEventChannelMemberCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePlatformEventChannelMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPlatformEventChannelMember",
		Method:             "POST",
		PathPattern:        "/tooling/sobjects/PlatformEventChannelMember",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePlatformEventChannelMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		log.Printf("[TRACE] err: %+v", err)
		return nil, err
	}
	return result.(*CreatePlatformEventChannelMemberCreated), nil

}

/*
DeletePlatformEventChannelMember deletes platform event channel member
*/
func (a *Client) DeletePlatformEventChannelMember(params *DeletePlatformEventChannelMemberParams) (*DeletePlatformEventChannelMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlatformEventChannelMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePlatformEventChannelMember",
		Method:             "DELETE",
		PathPattern:        "/tooling/sobjects/PlatformEventChannelMember/{Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePlatformEventChannelMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		log.Printf("[TRACE] err: %+v", err)
		return nil, err
	}
	return result.(*DeletePlatformEventChannelMemberNoContent), nil

}

/*
GetPlatformEventChannelMember gets platform event channel member
*/
func (a *Client) GetPlatformEventChannelMember(params *GetPlatformEventChannelMemberParams) (*GetPlatformEventChannelMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformEventChannelMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatformEventChannelMember",
		Method:             "GET",
		PathPattern:        "/tooling/sobjects/PlatformEventChannelMember/{Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlatformEventChannelMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		log.Printf("[TRACE] err: %+v", err)
		return nil, err
	}
	return result.(*GetPlatformEventChannelMemberOK), nil

}

/*
UpdatePlatformEventChannelMember updates platform event channel member
*/
func (a *Client) UpdatePlatformEventChannelMember(params *UpdatePlatformEventChannelMemberParams) (*UpdatePlatformEventChannelMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePlatformEventChannelMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePlatformEventChannelMember",
		Method:             "PATCH",
		PathPattern:        "/tooling/sobjects/PlatformEventChannelMember/{Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePlatformEventChannelMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		log.Printf("[TRACE] err: %+v", err)
		return nil, err
	}
	return result.(*UpdatePlatformEventChannelMemberNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
