// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/oauth2"

	"vestahealthcare/client/platform_event_channel"
)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/services/data/v57.0/tooling/sobjects"
)

// DefaultSchees are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// Config information for SalesforceRESTAPI client
type Config struct {
	ClientId     *string
	ClientSecret *string
	TokenUrl     *string
	TransportCfg *TransportConfig
	Username     *string
	Password     *string
}

// NewConfig create a new empty client Config
func NewConfig() *Config {
	return &Config{
		TransportCfg: DefaultTransportConfig(),
	}
}

// SetClientId for the client Config
func (c *Config) SetClientId(clientId *string) {
	c.ClientId = clientId
}

// SetClientSecret for the client Config
func (c *Config) SetClientSecret(clientSecret *string) {
	c.ClientSecret = clientSecret
}

// SetTokenUrl for the client Config
func (c *Config) SetTokenUrl(tokenUrl *string) {
	c.TokenUrl = tokenUrl
}

// SetUsername for the client Config
func (c *Config) SetUsername(username *string) {
	c.Username = username
}

// SetPassword for the client Config
func (c *Config) SetPassword(password *string) {
	c.Password = password
}

// SetAccountDomain for the client Config
func (c *Config) SetAccountDomain(accountDomain *string) {
	if c.TransportCfg == nil {
		c.TransportCfg = DefaultTransportConfig()
	}
	domain := *accountDomain
	c.TransportCfg = c.TransportCfg.WithHost(domain)
}

// New creates a new salesforce r e s t API client
func New(c *Config) *SalesforceRESTAPI {
	transport := httptransport.New(c.TransportCfg.Host, c.TransportCfg.BasePath, c.TransportCfg.Schemes)
	authInfo := OAuth2PasswordGrantAuth(*c.ClientId, *c.ClientSecret, *c.TokenUrl, *c.Username, *c.Password)

	cli := new(SalesforceRESTAPI)
	cli.Transport = transport

	cli.PlatformEventChannel = platform_event_channel.New(transport, strfmt.Default, authInfo)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// SalesforceRESTAPI is a client for salesforce r e s t API
type SalesforceRESTAPI struct {
	PlatformEventChannel *platform_event_channel.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *SalesforceRESTAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.PlatformEventChannel.SetTransport(transport)

}

// TODO: See if there is a way to move this out of Facade Template and into Main or Provider templates
func LMv1Auth(accessId, accessKey string) runtime.ClientAuthInfoWriter {
	return runtime.ClientAuthInfoWriterFunc(func(r runtime.ClientRequest, _ strfmt.Registry) error {
		// get epoch
		now := time.Now()
		nanos := now.UnixNano()
		epoch := strconv.FormatInt(nanos/1000000, 10)

		// build the signature
		h := hmac.New(sha256.New, []byte(accessKey))
		h.Write([]byte(r.GetMethod() + epoch))

		if r.GetBodyParam() != nil {
			buf := new(bytes.Buffer)
			enc := json.NewEncoder(buf)
			enc.SetEscapeHTML(false)
			_ = enc.Encode(r.GetBodyParam())
			h.Write(buf.Bytes())
		}

		if r.GetFileParam() != nil {
			for _, files := range r.GetFileParam() {
				for i, file := range files {
					buf := bytes.NewBuffer(nil)
					buf.ReadFrom(file)
					h.Write(buf.Bytes())
					file = runtime.NamedReader(file.Name(), bytes.NewReader(buf.Bytes()))
					files[i] = file
				}
			}
		}

		h.Write([]byte(r.GetPath()))
		hexDigest := hex.EncodeToString(h.Sum(nil))
		signature := base64.StdEncoding.EncodeToString([]byte(hexDigest))
		r.SetHeaderParam("Authorization", fmt.Sprintf("LMv1 %s:%s:%s", accessId, signature, epoch))
		//TODO Consider moving this up to terraform template level of config
		return r.SetHeaderParam("X-version", "3")
	})
}

func OAuth2PasswordGrantAuth(clientId, clientSecret, tokenUrl, username, password string) runtime.ClientAuthInfoWriter {
	return runtime.ClientAuthInfoWriterFunc(func(r runtime.ClientRequest, _ strfmt.Registry) error {
		config := &oauth2.Config{
			ClientID:     clientId,
			ClientSecret: clientSecret,
			Endpoint: oauth2.Endpoint{
				TokenURL: tokenUrl,
			},
		}
		ctx := context.Background()
		token, err := config.PasswordCredentialsToken(ctx, username, password)
		if err != nil {
			log.Printf("[TRACE] token err: %+v", err)
			log.Fatal(err)
		}
		return r.SetHeaderParam("Authorization", fmt.Sprintf("Bearer %s", token.AccessToken))
	})
}
