// Code generated by go-swagger; DO NOT EDIT.

package named_credential

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"log"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new named credential API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for named credential API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateNamedCredential creates named credential
*/
func (a *Client) CreateNamedCredential(params *CreateNamedCredentialParams) (*CreateNamedCredentialCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNamedCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNamedCredential",
		Method:             "POST",
		PathPattern:        "/tooling/sobjects/NamedCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNamedCredentialReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		log.Printf("[TRACE] err: %+v", err)
		return nil, err
	}
	return result.(*CreateNamedCredentialCreated), nil

}

/*
DeleteNamedCredential deletes named credential
*/
func (a *Client) DeleteNamedCredential(params *DeleteNamedCredentialParams) (*DeleteNamedCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNamedCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNamedCredential",
		Method:             "DELETE",
		PathPattern:        "/tooling/sobjects/NamedCredential/{Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNamedCredentialReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		log.Printf("[TRACE] err: %+v", err)
		return nil, err
	}
	return result.(*DeleteNamedCredentialNoContent), nil

}

/*
GetNamedCredential gets named credential
*/
func (a *Client) GetNamedCredential(params *GetNamedCredentialParams) (*GetNamedCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamedCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNamedCredential",
		Method:             "GET",
		PathPattern:        "/tooling/sobjects/NamedCredential/{Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNamedCredentialReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		log.Printf("[TRACE] err: %+v", err)
		return nil, err
	}
	return result.(*GetNamedCredentialOK), nil

}

/*
UpdateNamedCredential updates named credential
*/
func (a *Client) UpdateNamedCredential(params *UpdateNamedCredentialParams) (*UpdateNamedCredentialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNamedCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNamedCredential",
		Method:             "PATCH",
		PathPattern:        "/tooling/sobjects/NamedCredential/{Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNamedCredentialReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		log.Printf("[TRACE] err: %+v", err)
		return nil, err
	}
	return result.(*UpdateNamedCredentialNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
