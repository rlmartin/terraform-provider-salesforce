//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"log"
	"vestahealthcare/client"
	"vestahealthcare/client/platform_event_channel_member"
	"vestahealthcare/salesforce/schemata"
	"vestahealthcare/salesforce/utils"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

/*
PlatformEventChannelMember platform event channel member API
*/

func PlatformEventChannelMember() *schema.Resource {
	return &schema.Resource{
		CreateContext: createPlatformEventChannelMember,
		DeleteContext: deletePlatformEventChannelMember,
		ReadContext:   getPlatformEventChannelMember,
		UpdateContext: updatePlatformEventChannelMember,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Schema: schemata.PlatformEventChannelMemberSchema(),
	}
}

func DataResourcePlatformEventChannelMember() *schema.Resource {
	return &schema.Resource{
		ReadContext: getPlatformEventChannelMemberData,
		Schema:      schemata.DataSourcePlatformEventChannelMemberSchema(),
	}
}

func createPlatformEventChannelMember(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	model := schemata.PlatformEventChannelMemberModel(d)
	params := platform_event_channel_member.NewCreatePlatformEventChannelMemberParams()
	params.SetBody(model)

	client := m.(*client.SalesforceRESTAPI)

	resp, err := client.PlatformEventChannelMember.CreatePlatformEventChannelMember(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	schemata.SetPlatformEventChannelMemberCreateResponseResourceData(d, respModel, false)
	return diags
}

func deletePlatformEventChannelMember(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := platform_event_channel_member.NewDeletePlatformEventChannelMemberParams()

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		params.ID = idVal.(string)
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - Id")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	client := m.(*client.SalesforceRESTAPI)

	resp, err := client.PlatformEventChannelMember.DeletePlatformEventChannelMember(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	d.SetId("")
	return diags
}

func getPlatformEventChannelMemberInternal(ctx context.Context, d *schema.ResourceData, m interface{}, isDataResource bool) diag.Diagnostics {
	var diags diag.Diagnostics

	params := platform_event_channel_member.NewGetPlatformEventChannelMemberParams()

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		params.ID = idVal.(string)
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - Id")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	client := m.(*client.SalesforceRESTAPI)

	resp, err := client.PlatformEventChannelMember.GetPlatformEventChannelMember(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	schemata.SetPlatformEventChannelMemberResourceData(d, respModel, isDataResource)

	return diags
}
func getPlatformEventChannelMemberData(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	return getPlatformEventChannelMemberInternal(ctx, d, m, true)
}

func getPlatformEventChannelMember(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	return getPlatformEventChannelMemberInternal(ctx, d, m, false)
}

func updatePlatformEventChannelMember(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	model := schemata.PlatformEventChannelMemberUpdateRequestModel(d)
	params := platform_event_channel_member.NewUpdatePlatformEventChannelMemberParams()

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		params.ID = idVal.(string)
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - Id")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	params.SetBody(model)

	// list of available properties
	props := schemata.GetPlatformEventChannelMemberPropertyFields()

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	client := m.(*client.SalesforceRESTAPI)

	// makes a bulk update for all properties that were changed
	resp, err := client.PlatformEventChannelMember.UpdatePlatformEventChannelMember(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}
	d.Partial(false)

	return diags
}
