//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"log"
	"vestahealthcare/client"
	"vestahealthcare/client/event_relay_feedback_lookup"
	"vestahealthcare/salesforce/schemata"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

/*
EventRelayFeedbackLookup event relay feedback lookup API
*/

func DataResourceEventRelayFeedbackLookup() *schema.Resource {
	return &schema.Resource{
		ReadContext: getQueryData,
		Schema:      schemata.DataSourceEventRelayFeedbackLookupSchema(),
	}
}

func getQueryInternal(ctx context.Context, d *schema.ResourceData, m interface{}, isDataResource bool) diag.Diagnostics {
	var diags diag.Diagnostics

	params := event_relay_feedback_lookup.NewGetQueryParams()

	qVal, qIsSet := d.GetOk("q")
	if qIsSet {
		params.Q = fmt.Sprintf("SELECT Id FROM EventRelayFeedback WHERE EventRelayConfigId='%s'", qVal.(string))
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - q")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	client := m.(*client.SalesforceRESTAPI)

	resp, err := client.EventRelayFeedbackLookup.GetQuery(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	schemata.SetEventRelayFeedbackLookupResourceData(d, respModel, isDataResource)

	return diags
}
func getQueryData(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	return getQueryInternal(ctx, d, m, true)
}

func getQuery(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	return getQueryInternal(ctx, d, m, false)
}
